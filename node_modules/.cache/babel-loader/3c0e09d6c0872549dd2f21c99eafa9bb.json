{"ast":null,"code":"var _jsxFileName = \"/home/thiago-santos-rocha/\\xC1rea de Trabalho/Rocketsweat/ignite-template-reactjs-criando-um-hook-de-carrinho-de-compras/src/hooks/useCart.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { createContext, useContext, useState } from 'react';\nimport { toast } from 'react-toastify';\nimport { api } from '../services/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CartContext = /*#__PURE__*/createContext({});\nexport function CartProvider({\n  children\n}) {\n  _s();\n\n  const [cart, setCart] = useState(() => {\n    const storagedCart = localStorage.getItem('@RocketShoes:cart');\n\n    if (storagedCart) {\n      return JSON.parse(storagedCart);\n    }\n\n    return [];\n  });\n\n  const addProduct = async productId => {\n    try {\n      // TODO\n      const updateCart = [...cart];\n      const productExists = updateCart.find(p => p.id === productId);\n      const stock = await api.get(`/stock/${productId}`);\n      const stockAmount = stock.data.amount;\n      const currentAmount = productExists ? productExists.amount : 0;\n      const amount = currentAmount + 1;\n\n      if (amount > stockAmount) {\n        toast.error('Quantidade solicitada fora de estoque');\n        return;\n      }\n\n      if (productExists) {\n        productExists.amount = amount;\n      } else {\n        const response = await api.get(`/products/${productId}`);\n        const product = { ...response.data,\n          amount: 1\n        };\n        updateCart.push(product);\n      }\n\n      setCart(updateCart);\n      localStorage.setItem('@RocketShoes:cart', JSON.stringify(updateCart));\n    } catch {\n      // TODO\n      toast.error('Erro na adição do produto');\n    }\n  };\n\n  const removeProduct = productId => {\n    try {\n      // TODO\n      const updateCart = [...cart];\n      const productIndex = updateCart.findIndex(p => p.id === productId);\n\n      if (productIndex >= 0) {\n        updateCart.splice(productIndex, 1);\n        setCart(updateCart);\n        localStorage.setItem('@RocketShoes:cart', JSON.stringify(updateCart));\n      } else {\n        throw Error();\n      }\n    } catch {\n      // TODO\n      toast.error('Erro na remoção do produto');\n    }\n  };\n\n  const updateProductAmount = async ({\n    productId,\n    amount\n  }) => {\n    try {\n      // TODO\n      if (amount <= 0) return;\n      const stock = await api.get(`/stock/${productId}`);\n      const stockAmount = stock.data.amount;\n\n      if (amount > stockAmount) {\n        toast.error('Quantidade solicitada fora de estoque');\n        return;\n      }\n\n      const newCart = cart.map(product => productId === product.id ? { ...product,\n        amount\n      } : product);\n      setCart(newCart);\n      localStorage.setItem('@RocketShoes:cart', JSON.stringify(newCart));\n    } catch {\n      // TODO\n      toast.error('Erro na alteração de quantidade do produto');\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: {\n      cart,\n      addProduct,\n      removeProduct,\n      updateProductAmount\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 123,\n    columnNumber: 5\n  }, this);\n}\n\n_s(CartProvider, \"yuvwwZIsxrDpvj1ES9WkyhAC5Ms=\");\n\n_c = CartProvider;\nexport function useCart() {\n  _s2();\n\n  const context = useContext(CartContext);\n  return context;\n}\n\n_s2(useCart, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\n\nvar _c;\n\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"sources":["/home/thiago-santos-rocha/Área de Trabalho/Rocketsweat/ignite-template-reactjs-criando-um-hook-de-carrinho-de-compras/src/hooks/useCart.tsx"],"names":["createContext","useContext","useState","toast","api","CartContext","CartProvider","children","cart","setCart","storagedCart","localStorage","getItem","JSON","parse","addProduct","productId","updateCart","productExists","find","p","id","stock","get","stockAmount","data","amount","currentAmount","error","response","product","push","setItem","stringify","removeProduct","productIndex","findIndex","splice","Error","updateProductAmount","newCart","map","useCart","context"],"mappings":"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","sourcesContent":["import { createContext, ReactNode, useContext, useState } from 'react';\nimport { toast } from 'react-toastify';\nimport { api } from '../services/api';\nimport { Product, Stock } from '../types';\n\ninterface CartProviderProps {\n  children: ReactNode;\n}\n\ninterface UpdateProductAmount {\n  productId: number;\n  amount: number;\n}\n\ninterface CartContextData {\n  cart: Product[];\n  addProduct: (productId: number) => Promise<void>;\n  removeProduct: (productId: number) => void;\n  updateProductAmount: ({ productId, amount }: UpdateProductAmount) => void;\n}\n\nconst CartContext = createContext<CartContextData>({} as CartContextData);\n\nexport function CartProvider({ children }: CartProviderProps): JSX.Element {\n  const [cart, setCart] = useState<Product[]>(() => {\n    const storagedCart = localStorage.getItem('@RocketShoes:cart')\n\n    if (storagedCart) {\n      return JSON.parse(storagedCart);\n    }\n\n    return [];\n  });\n\n  const addProduct = async (productId: number) => {\n    try {\n      // TODO\n      const updateCart=[...cart];\n\n\n            \n      const productExists = updateCart.find((p)=>p.id===productId);\n      const stock = await api.get<Stock>(`/stock/${productId}`);\n      const stockAmount = stock.data.amount\n      const currentAmount = productExists?productExists.amount:0;\n      const amount = currentAmount +1;\n      \n      if(amount>stockAmount){\n        toast.error('Quantidade solicitada fora de estoque');\n        return\n      }\n      if(productExists){\n        productExists.amount = amount\n       \n      }else{\n        const response = await api.get(`/products/${productId}`);\n        \n        const product = {\n          ...response.data,\n          amount:1\n        }\n        updateCart.push(product)\n      }\n      setCart(updateCart)\n      localStorage.setItem('@RocketShoes:cart', JSON.stringify(updateCart));\n      \n    } catch {\n      // TODO\n      toast.error('Erro na adição do produto');\n    }\n  };\n\n  const removeProduct = (productId: number) => {\n    try {\n      // TODO\n      const updateCart=[...cart];\n\n      const productIndex = updateCart.findIndex(p=>p.id===productId)\n      if(productIndex>=0){\n        updateCart.splice(productIndex,1)             \n        setCart(updateCart)\n        localStorage.setItem('@RocketShoes:cart', JSON.stringify(updateCart));\n      }else{\n        throw Error()\n      }\n\n\n    } catch {\n      // TODO\n      toast.error('Erro na remoção do produto');\n    }\n  };\n\n  const updateProductAmount = async ({\n    productId,\n    amount,\n  }: UpdateProductAmount) => {\n    try {\n      // TODO\n      if (amount <= 0) return;\n\n      const stock = await api.get<Stock>(`/stock/${productId}`);\n      const stockAmount = stock.data.amount;\n\n      if (amount > stockAmount) {\n        toast.error('Quantidade solicitada fora de estoque');\n        return;\n      }\n      const newCart = cart.map(product=>productId===product.id?({\n        ...product,\n        amount\n      }):product)\n      setCart(newCart);\n      localStorage.setItem('@RocketShoes:cart', JSON.stringify(newCart));\n\n    } catch {\n      // TODO\n      toast.error('Erro na alteração de quantidade do produto');\n    }\n  };\n\n  return (\n    <CartContext.Provider\n      value={{ cart, addProduct, removeProduct, updateProductAmount }}\n    >\n      {children}\n    </CartContext.Provider>\n  );\n}\n\nexport function useCart(): CartContextData {\n  const context = useContext(CartContext);\n\n  return context;\n}\n"]},"metadata":{},"sourceType":"module"}