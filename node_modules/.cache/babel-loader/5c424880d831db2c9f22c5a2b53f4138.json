{"ast":null,"code":"var _jsxFileName = \"/home/thiago-santos-rocha/\\xC1rea de Trabalho/Rocketsweat/ignite-template-reactjs-criando-um-hook-de-carrinho-de-compras/src/hooks/useCart.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { createContext, useContext, useState } from 'react';\nimport { toast } from 'react-toastify';\nimport { api } from '../services/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CartContext = /*#__PURE__*/createContext({});\nexport function CartProvider({\n  children\n}) {\n  _s();\n\n  const [cart, setCart] = useState(() => {\n    const storagedCart = localStorage.getItem('@RocketShoes:cart');\n\n    if (storagedCart) {\n      return JSON.parse(storagedCart);\n    }\n\n    return [];\n  });\n\n  const addProduct = async productId => {\n    try {\n      // TODO\n      let cartLocalStore = localStorage.getItem('@RocketShoes:cart');\n\n      if (!cartLocalStore) {\n        cartLocalStore = '[]';\n      }\n\n      const cartStore = JSON.parse(cartLocalStore);\n      const productIndex = cartStore.findIndex(p => p.id === productId);\n\n      if (productIndex < 0) {\n        const response = await api.get(`/products/${productId}`);\n        const product = { ...response.data,\n          amount: 1\n        };\n        localStorage.setItem('@RocketShoes:cart', JSON.stringify([...cartStore, product]));\n        setCart([...cartStore, product]);\n      } else {\n        cartStore[productIndex].amount = cartStore[productIndex].amount + 1;\n        console.log(cartStore[productIndex].amount);\n        setCart(cartStore);\n        localStorage.setItem('@RocketShoes:cart', JSON.stringify(cartStore));\n      }\n    } catch {\n      // TODO\n      toast.error('Erro na adição do produto');\n    }\n  };\n\n  const removeProduct = productId => {\n    try {// TODO\n    } catch {// TODO\n    }\n  };\n\n  const updateProductAmount = async ({\n    productId,\n    amount\n  }) => {\n    try {// TODO\n    } catch {// TODO\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: {\n      cart,\n      addProduct,\n      removeProduct,\n      updateProductAmount\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 5\n  }, this);\n}\n\n_s(CartProvider, \"yuvwwZIsxrDpvj1ES9WkyhAC5Ms=\");\n\n_c = CartProvider;\nexport function useCart() {\n  _s2();\n\n  const context = useContext(CartContext);\n  return context;\n}\n\n_s2(useCart, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\n\nvar _c;\n\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"sources":["/home/thiago-santos-rocha/Área de Trabalho/Rocketsweat/ignite-template-reactjs-criando-um-hook-de-carrinho-de-compras/src/hooks/useCart.tsx"],"names":["createContext","useContext","useState","toast","api","CartContext","CartProvider","children","cart","setCart","storagedCart","localStorage","getItem","JSON","parse","addProduct","productId","cartLocalStore","cartStore","productIndex","findIndex","p","id","response","get","product","data","amount","setItem","stringify","console","log","error","removeProduct","updateProductAmount","useCart","context"],"mappings":"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","sourcesContent":["import { createContext, ReactNode, useContext, useState } from 'react';\nimport { toast } from 'react-toastify';\nimport { api } from '../services/api';\nimport { Product, Stock } from '../types';\n\ninterface CartProviderProps {\n  children: ReactNode;\n}\n\ninterface UpdateProductAmount {\n  productId: number;\n  amount: number;\n}\n\ninterface CartContextData {\n  cart: Product[];\n  addProduct: (productId: number) => Promise<void>;\n  removeProduct: (productId: number) => void;\n  updateProductAmount: ({ productId, amount }: UpdateProductAmount) => void;\n}\n\nconst CartContext = createContext<CartContextData>({} as CartContextData);\n\nexport function CartProvider({ children }: CartProviderProps): JSX.Element {\n  const [cart, setCart] = useState<Product[]>(() => {\n    const storagedCart = localStorage.getItem('@RocketShoes:cart')\n\n    if (storagedCart) {\n      return JSON.parse(storagedCart);\n    }\n\n    return [];\n  });\n\n  const addProduct = async (productId: number) => {\n    try {\n      // TODO\n      let cartLocalStore = localStorage.getItem('@RocketShoes:cart')\n      if(!cartLocalStore){\n        cartLocalStore ='[]'\n      }\n      const cartStore = JSON.parse(cartLocalStore)\n      \n      const productIndex = cartStore.findIndex((p:Product)=>p.id===productId);\n      \n      if(productIndex<0){\n        const response = await api.get(`/products/${productId}`);\n        const product = {\n          ...response.data,\n          amount:1\n        }\n        localStorage.setItem('@RocketShoes:cart',JSON.stringify([...cartStore,product]));\n        setCart([...cartStore,product])\n\n      }else{\n        cartStore[productIndex].amount=cartStore[productIndex].amount+1;\n        console.log( cartStore[productIndex].amount);\n        setCart(cartStore)\n        localStorage.setItem('@RocketShoes:cart',JSON.stringify(cartStore));\n      }\n      \n    } catch {\n      // TODO\n      toast.error('Erro na adição do produto');\n    }\n  };\n\n  const removeProduct = (productId: number) => {\n    try {\n      // TODO\n    } catch {\n      // TODO\n    }\n  };\n\n  const updateProductAmount = async ({\n    productId,\n    amount,\n  }: UpdateProductAmount) => {\n    try {\n      // TODO\n    } catch {\n      // TODO\n    }\n  };\n\n  return (\n    <CartContext.Provider\n      value={{ cart, addProduct, removeProduct, updateProductAmount }}\n    >\n      {children}\n    </CartContext.Provider>\n  );\n}\n\nexport function useCart(): CartContextData {\n  const context = useContext(CartContext);\n\n  return context;\n}\n"]},"metadata":{},"sourceType":"module"}